import { Request, Response, Next } from "restify";
import { ApiServer, Routes, HttpServer } from "aplx-hmw-server";
import * as path from "path";
import { AwsCognitoControllers } from "./controller";
import { CommonController } from "../common";
import { factory } from "../config";

/**
 * Create factory for aws if this controller will be initalized
 */
export class AwsCognitoRoutes implements Routes {

    constructor() {
        if (!factory.getWebConfig().AWS) {
            console.log("AWS CONFIGURATION IS NOT SET UP");
            process.exit();
        }
    }

    initialize(httpServer: HttpServer): void {
        httpServer.post('/aws/authentication/adminUserSignUp', this.adminUserSignUp.bind(this));
        httpServer.post('/aws/authentication/login', this.userSignIn.bind(this));
        httpServer.post('/aws/authentication/setNewPassword', this.setNewPassword.bind(this));
        httpServer.get('/aws/authentication/getPools', this.getUserPools.bind(this));
        httpServer.get('/aws/authentication/validateUser', this.validateUser.bind(this));
        httpServer.post('/aws/authentication/validateUser', this.validateUser.bind(this));
        httpServer.post('/aws/authentication/changePassword', this.changePassword.bind(this));
        // httpServer.post('/aws/authentication/renewLogin', this.renewLogin.bind(this));
    }

    async adminUserSignUp(req: Request, res: Response, next: Next) {
        new AwsCognitoControllers().adminUserSignUp(req.body).then((success) => {
            res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "getUserPools()")
            res.send(400, error);
        })
    }

    async userSignIn(req: Request, res: Response, next: Next) {
        new AwsCognitoControllers().userSignIn(req.body).then((success) => {
            res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "userSignIn()")
            res.send(400, error);
        })
    }

    async setNewPassword(req: Request, res: Response, next: Next) {
        new AwsCognitoControllers().setNewUserPassword(req.body).then((success) => {
            res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "setNewPassword()")
            res.send(400, error);
        })
    }

    async getUserPools(req: Request, res: Response, next: Next) {
        new AwsCognitoControllers().getUserPools().then((success) => {
            return res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "getUserPools()")
            return res.send(400, error);
        })
    }


    async validateUser(req: Request, res: Response, next: Next) {
        new CommonController().validateJWTToken(req.headers['x-access-token'] as string).then((success) => {
            return res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "validateUser()")
            return res.send(400, error);
        })
    }

    async changePassword(req: Request, res: Response, next: Next) {
        new AwsCognitoControllers().changePassword(req.body).then((success) => {
            return res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "changePassword()")
            return res.send(400, error);
        })
    }

    async renewLogin(req: Request, res: Response, next: Next) {
        new AwsCognitoControllers().renew(req.headers).then((success) => {
            return res.send(200, success);
        }, (error) => {
            ApiServer.Logger.Error(error, path.join(__dirname), "changePassword()")
            return res.send(400, error);
        })
    }

}