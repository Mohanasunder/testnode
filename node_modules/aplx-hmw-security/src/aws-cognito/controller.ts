import { CognitoSync, CognitoIdentityServiceProvider } from "aws-sdk";
import * as AmazonCognitoIdentity from 'amazon-cognito-identity-js';
import { factory } from "../config/factory";
import { AwsCognitoMappers } from "./mapper";
import { sign } from "jsonwebtoken";
import { SECRET_KEY, EXPIRE_TIME } from "../config/constants";

export class AwsCognitoControllers {

    constructor() {
        if (!factory.getWebConfig().AWS) {
            console.log("AWS CONFIGURATION IS NOT SET UP");
            process.exit();
        }
    }

    getUserPools(): Promise<any> {
        return new Promise((resolve, reject) => {
            try {
                var client = new CognitoIdentityServiceProvider(
                    {
                        apiVersion: factory.getWebConfig().AWS.API_VERSION,
                        region: factory.getWebConfig().AWS.AWS_Region
                    }
                );
                client.listUserPools({ MaxResults: 10 }, (err, data) => {
                    if (!err) {
                        return resolve(data);
                    } else {
                        return reject(err)
                    }
                })
            } catch (error) {
                console.log(error);
                return reject(error)
            }
        });
    }

    /**
   * Communicate to aws with the region id specified
   * Will create the user based on the user pool configuration which is passed as parameters while calling admin create user
   * @param params { email: String, mobile: String with country code" }
   */
    adminUserSignUp(params): Promise<string | JSON> {
        return new Promise((resolve, reject) => {
            try {
                var client = new CognitoIdentityServiceProvider({ apiVersion: factory.getWebConfig().AWS.API_VERSION, region: factory.getWebConfig().AWS.AWS_Region });
                var data = new AwsCognitoMappers().adminCreateSignUpRequestMapper(params);
                client.adminCreateUser(data, function (err, data) {
                    if (err) {
                        return reject(err)
                    }
                    else {
                        return resolve(new AwsCognitoMappers().adminCreateSignUpResponseMapper(data));
                    }
                });
            }
            catch (err) {
                return reject(err)
            }
        });
    }

    /**
     * Will sign in user with aws cognito service
     * @param params {"email": "string", "password": "**********"}
     */
    userSignIn(params): Promise<AmazonCognitoIdentity.CognitoUser | any> {

        return new Promise((resolve, reject) => {
            try {
                var authenticationData = {
                    Username: params.email,
                    Password: params.password
                };

                var userPool = new AmazonCognitoIdentity.CognitoUserPool({
                    UserPoolId: factory.getWebConfig().AWS.USER_POOL_ID,
                    ClientId: factory.getWebConfig().AWS.CLIENT_ID
                });

                var userData = {
                    Username: params.email,
                    Pool: userPool
                };

                var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
                var authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);

                cognitoUser.authenticateUser(authenticationDetails, {
                    onSuccess: function (result) {
                        // console.log('access token + ' + result.getAccessToken().getJwtToken());
                        // console.log('id token + ' + result.getIdToken().getJwtToken());
                        // console.log('refresh token + ' + result.getRefreshToken().getToken());
                        const token = sign({ email: params.email }, SECRET_KEY, {
                            expiresIn: EXPIRE_TIME
                        });
                        const response = {
                            access_token: token,
                            aws_refresh_token: result.getRefreshToken().getToken()
                        }
                        return resolve(response)
                    },
                    onFailure: function (err) {
                        return reject(err)
                    },
                    newPasswordRequired: function (userAttributes, requiredAttributes) {
                        if (params.newPassword) {
                            return resolve(cognitoUser as AmazonCognitoIdentity.CognitoUser);
                        }
                        return resolve({ "isResetPasswordRequired": true });
                    }
                });
            } catch (err) {
                return reject(err);
            }
        });
    };

    /**
     * set new user password
     * @param params {
	"email": "mahboob.mohamed@applexus.com",
	"password": "123456789",
	"newPassword": "1234567890"

}
     */
    setNewUserPassword(params) {
        return new Promise((resolve, reject) => {
            try {
                var userPool = new AmazonCognitoIdentity.CognitoUserPool({
                    UserPoolId: factory.getWebConfig().AWS.USER_POOL_ID,
                    ClientId: factory.getWebConfig().AWS.CLIENT_ID
                });

                var userData = {
                    Username: params.email,
                    Pool: userPool
                };

                var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
                this.userSignIn(params).then((success: AmazonCognitoIdentity.CognitoUser) => {
                    cognitoUser = success;
                    cognitoUser.completeNewPasswordChallenge(params.newPassword, null, {
                        onSuccess: function (result) {
                            return resolve(result);
                        },
                        onFailure: function (err) {
                            return reject(err);
                        }
                    });
                })

            } catch (err) {
                return reject(err);
            }
        });
    }

    /**
     * refresh login in aws
     * If token is expired with aws, Instead of login, we can reuse the refresh token to create new session
     * @param object { email: "email@some.com", token: "22dasdasd23qasdasd"}
     */
    renew(params) {
        return new Promise((resolve, reject) => {
            const RefreshToken = new AmazonCognitoIdentity.CognitoRefreshToken({ RefreshToken: params.token });

            const userPool = new AmazonCognitoIdentity.CognitoUserPool({
                UserPoolId: factory.getWebConfig().AWS.USER_POOL_ID,
                ClientId: factory.getWebConfig().AWS.CLIENT_ID
            });

            const userData = {
                Username: params.email,
                Pool: userPool
            };

            const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

            cognitoUser.refreshSession(RefreshToken, (err, session) => {
                if (err) {
                    console.log(err);
                    return reject(err);
                } else {
                    let retObj = {
                        "access_token": session.accessToken.jwtToken,
                        "id_token": session.idToken.jwtToken,
                        "refresh_token": session.refreshToken.token,
                    }
                    console.log(retObj);
                    return resolve(retObj);
                }
            });
        });
    }

    /**
     * 
     * @param params {username: email, oldPassword: old_password, newPassword: new_passsword}
     */
    changePassword(params) {
        return new Promise((resolve, reject) => {
            var authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails({
                Username: params.username,
                Password: params.oldPassword,
            });

            const userPool = new AmazonCognitoIdentity.CognitoUserPool({
                UserPoolId: factory.getWebConfig().AWS.USER_POOL_ID,
                ClientId: factory.getWebConfig().AWS.CLIENT_ID
            });

            var userData = {
                Username: params.username,
                Pool: userPool
            };
            var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);

            cognitoUser.authenticateUser(authenticationDetails, {
                onSuccess: function (result) {
                    cognitoUser.changePassword(params.oldPassword, params.newPassword, (err, result) => {
                        if (err) {
                            console.log(err);
                            return reject(err)
                        } else {
                            console.log("Successfully changed password of the user.");
                            console.log(result);
                            return resolve(result)
                        }
                    });
                },
                onFailure: function (err) {
                    console.log(err);
                    return reject(err);
                },
            });
        });
    }
}