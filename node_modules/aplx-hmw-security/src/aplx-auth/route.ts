import { Routes, HttpServer, ApiServer, ApplicationSource, factory as  Ser} from "aplx-hmw-server";
import { Request, Response, Next } from "restify";
import { AplxAuthController } from "./controller";
import { join } from "path";
import { factory } from "../config";

export class AplxAuthRoute implements Routes{
    initialize(httpServer: HttpServer): void {
        /**
         * Create new User
         */
     //   httpServer.post("/aplxAuth/authentication/createUser", this.createUser.bind(this));
        /**
         * service to do login
         */
        httpServer.post("/aplxAuth/authentication/login", this.login.bind(this));
        /**
        * service to get token for reseting the password
        */
   //     httpServer.post("/aplxAuth/authentication/forgetPassword", this.forgetPassword.bind(this));
        /**
        * service to do reset password
        */
    //    httpServer.post("/aplxAuth/authentication/resetPassword", this.resetPassword.bind(this));
    }
    
    constructor() {
       
    }
    /*
    createUser(req: Request, res: Response, next: Next) {
        const applicationSource = factory.getWebConfig().applicationSource;
        switch (applicationSource) {
            case ApplicationSource.APLX:
                new AplxAuthController().createUser(req.body, req.headers['x-access-token']).then( (success) => {
                    res.send(200, success);
                }, (error) => {
                    ApiServer.Logger.Error(error, join(__dirname), "createUser()")
                    res.send(400, error);
                });
                break;
            case ApplicationSource.ERP:
                break;
            case ApplicationSource.BOTH:
                break;
            default:
                break;
        }
    }
*/
    login(req: Request, res: Response, next: Next) {

        const applicationSource = factory.getWebConfig().applicationSource;
        switch (applicationSource) {
            // If application source is aplx
            case ApplicationSource.APLX:
                new AplxAuthController().doLogin(req.body).then((success) => {
                    res.send(200, success);
                }, (error) => {
                    ApiServer.Logger.Error(error, join(__dirname), "login()")
                    res.send(400, error);
                });
                break;
        
            // If application source is any ERP
            case ApplicationSource.ERP:
                break;

            case ApplicationSource.BOTH:
                break;
            
            default:
                res.send(400, "Application Source not specified.")
                break;
        }
    }

/*
    forgetPassword(req: Request, res: Response, next: Next) {
        const applicationSource = factory.getWebConfig().applicationSource;
        switch (applicationSource) {
            // If application source is aplx
            case ApplicationSource.APLX:
                new AplxAuthController().generateTokenForPasswordReset(req.body).then((success) => {
                    res.send(200, success);
                }, (error) => {
                    ApiServer.Logger.Error(error, join(__dirname), "forgetPassword()")
                    res.send(400, error);
                });
                break;

            // If application source is any ERP
            case ApplicationSource.ERP:
                break;

            case ApplicationSource.BOTH:
                break;

            default:
                res.send(400, "Application Source not specified.")
                break;
        }
    }


    resetPassword(req: Request, res: Response, next: Next) {
        const applicationSource = factory.getWebConfig().applicationSource;
        switch (applicationSource) {
            // If application source is aplx
            case ApplicationSource.APLX:
                new AplxAuthController().resetPassword(req.body).then((success) => {
                    res.send(200, success);
                }, (error) => {
                    ApiServer.Logger.Error(error, join(__dirname), "forgetPassword()")
                    res.send(400, error);
                });
                break;

            // If application source is any ERP
            case ApplicationSource.ERP:
                break;

            case ApplicationSource.BOTH:
                break;

            default:
                res.send(400, "Application Source not specified.")
                break;
        }
    }
    */
}