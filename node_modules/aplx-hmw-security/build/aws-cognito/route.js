"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var aplx_hmw_server_1 = require("aplx-hmw-server");
var path = __importStar(require("path"));
var controller_1 = require("./controller");
var common_1 = require("../common");
var config_1 = require("../config");
/**
 * Create factory for aws if this controller will be initalized
 */
var AwsCognitoRoutes = /** @class */ (function () {
    function AwsCognitoRoutes() {
        if (!config_1.factory.getWebConfig().AWS) {
            console.log("AWS CONFIGURATION IS NOT SET UP");
            process.exit();
        }
    }
    AwsCognitoRoutes.prototype.initialize = function (httpServer) {
        httpServer.post('/aws/authentication/adminUserSignUp', this.adminUserSignUp.bind(this));
        httpServer.post('/aws/authentication/login', this.userSignIn.bind(this));
        httpServer.post('/aws/authentication/setNewPassword', this.setNewPassword.bind(this));
        httpServer.get('/aws/authentication/getPools', this.getUserPools.bind(this));
        httpServer.get('/aws/authentication/validateUser', this.validateUser.bind(this));
        httpServer.post('/aws/authentication/validateUser', this.validateUser.bind(this));
        httpServer.post('/aws/authentication/changePassword', this.changePassword.bind(this));
        // httpServer.post('/aws/authentication/renewLogin', this.renewLogin.bind(this));
    };
    AwsCognitoRoutes.prototype.adminUserSignUp = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new controller_1.AwsCognitoControllers().adminUserSignUp(req.body).then(function (success) {
                    res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "getUserPools()");
                    res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    AwsCognitoRoutes.prototype.userSignIn = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new controller_1.AwsCognitoControllers().userSignIn(req.body).then(function (success) {
                    res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "userSignIn()");
                    res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    AwsCognitoRoutes.prototype.setNewPassword = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new controller_1.AwsCognitoControllers().setNewUserPassword(req.body).then(function (success) {
                    res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "setNewPassword()");
                    res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    AwsCognitoRoutes.prototype.getUserPools = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new controller_1.AwsCognitoControllers().getUserPools().then(function (success) {
                    return res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "getUserPools()");
                    return res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    AwsCognitoRoutes.prototype.validateUser = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new common_1.CommonController().validateJWTToken(req.headers['x-access-token']).then(function (success) {
                    return res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "validateUser()");
                    return res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    AwsCognitoRoutes.prototype.changePassword = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new controller_1.AwsCognitoControllers().changePassword(req.body).then(function (success) {
                    return res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "changePassword()");
                    return res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    AwsCognitoRoutes.prototype.renewLogin = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                new controller_1.AwsCognitoControllers().renew(req.headers).then(function (success) {
                    return res.send(200, success);
                }, function (error) {
                    aplx_hmw_server_1.ApiServer.Logger.Error(error, path.join(__dirname), "changePassword()");
                    return res.send(400, error);
                });
                return [2 /*return*/];
            });
        });
    };
    return AwsCognitoRoutes;
}());
exports.AwsCognitoRoutes = AwsCognitoRoutes;
//# sourceMappingURL=route.js.map