"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var aws_sdk_1 = require("aws-sdk");
var AmazonCognitoIdentity = __importStar(require("amazon-cognito-identity-js"));
var factory_1 = require("../config/factory");
var mapper_1 = require("./mapper");
var jsonwebtoken_1 = require("jsonwebtoken");
var constants_1 = require("../config/constants");
var AwsCognitoControllers = /** @class */ (function () {
    function AwsCognitoControllers() {
        if (!factory_1.factory.getWebConfig().AWS) {
            console.log("AWS CONFIGURATION IS NOT SET UP");
            process.exit();
        }
    }
    AwsCognitoControllers.prototype.getUserPools = function () {
        return new Promise(function (resolve, reject) {
            try {
                var client = new aws_sdk_1.CognitoIdentityServiceProvider({
                    apiVersion: factory_1.factory.getWebConfig().AWS.API_VERSION,
                    region: factory_1.factory.getWebConfig().AWS.AWS_Region
                });
                client.listUserPools({ MaxResults: 10 }, function (err, data) {
                    if (!err) {
                        return resolve(data);
                    }
                    else {
                        return reject(err);
                    }
                });
            }
            catch (error) {
                console.log(error);
                return reject(error);
            }
        });
    };
    /**
   * Communicate to aws with the region id specified
   * Will create the user based on the user pool configuration which is passed as parameters while calling admin create user
   * @param params { email: String, mobile: String with country code" }
   */
    AwsCognitoControllers.prototype.adminUserSignUp = function (params) {
        return new Promise(function (resolve, reject) {
            try {
                var client = new aws_sdk_1.CognitoIdentityServiceProvider({ apiVersion: factory_1.factory.getWebConfig().AWS.API_VERSION, region: factory_1.factory.getWebConfig().AWS.AWS_Region });
                var data = new mapper_1.AwsCognitoMappers().adminCreateSignUpRequestMapper(params);
                client.adminCreateUser(data, function (err, data) {
                    if (err) {
                        return reject(err);
                    }
                    else {
                        return resolve(new mapper_1.AwsCognitoMappers().adminCreateSignUpResponseMapper(data));
                    }
                });
            }
            catch (err) {
                return reject(err);
            }
        });
    };
    /**
     * Will sign in user with aws cognito service
     * @param params {"email": "string", "password": "**********"}
     */
    AwsCognitoControllers.prototype.userSignIn = function (params) {
        return new Promise(function (resolve, reject) {
            try {
                var authenticationData = {
                    Username: params.email,
                    Password: params.password
                };
                var userPool = new AmazonCognitoIdentity.CognitoUserPool({
                    UserPoolId: factory_1.factory.getWebConfig().AWS.USER_POOL_ID,
                    ClientId: factory_1.factory.getWebConfig().AWS.CLIENT_ID
                });
                var userData = {
                    Username: params.email,
                    Pool: userPool
                };
                var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
                var authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);
                cognitoUser.authenticateUser(authenticationDetails, {
                    onSuccess: function (result) {
                        // console.log('access token + ' + result.getAccessToken().getJwtToken());
                        // console.log('id token + ' + result.getIdToken().getJwtToken());
                        // console.log('refresh token + ' + result.getRefreshToken().getToken());
                        var token = jsonwebtoken_1.sign({ email: params.email }, constants_1.SECRET_KEY, {
                            expiresIn: constants_1.EXPIRE_TIME
                        });
                        var response = {
                            access_token: token,
                            aws_refresh_token: result.getRefreshToken().getToken()
                        };
                        return resolve(response);
                    },
                    onFailure: function (err) {
                        return reject(err);
                    },
                    newPasswordRequired: function (userAttributes, requiredAttributes) {
                        if (params.newPassword) {
                            return resolve(cognitoUser);
                        }
                        return resolve({ "isResetPasswordRequired": true });
                    }
                });
            }
            catch (err) {
                return reject(err);
            }
        });
    };
    ;
    /**
     * set new user password
     * @param params {
    "email": "mahboob.mohamed@applexus.com",
    "password": "123456789",
    "newPassword": "1234567890"

}
     */
    AwsCognitoControllers.prototype.setNewUserPassword = function (params) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                var userPool = new AmazonCognitoIdentity.CognitoUserPool({
                    UserPoolId: factory_1.factory.getWebConfig().AWS.USER_POOL_ID,
                    ClientId: factory_1.factory.getWebConfig().AWS.CLIENT_ID
                });
                var userData = {
                    Username: params.email,
                    Pool: userPool
                };
                var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
                _this.userSignIn(params).then(function (success) {
                    cognitoUser = success;
                    cognitoUser.completeNewPasswordChallenge(params.newPassword, null, {
                        onSuccess: function (result) {
                            return resolve(result);
                        },
                        onFailure: function (err) {
                            return reject(err);
                        }
                    });
                });
            }
            catch (err) {
                return reject(err);
            }
        });
    };
    /**
     * refresh login in aws
     * If token is expired with aws, Instead of login, we can reuse the refresh token to create new session
     * @param object { email: "email@some.com", token: "22dasdasd23qasdasd"}
     */
    AwsCognitoControllers.prototype.renew = function (params) {
        return new Promise(function (resolve, reject) {
            var RefreshToken = new AmazonCognitoIdentity.CognitoRefreshToken({ RefreshToken: params.token });
            var userPool = new AmazonCognitoIdentity.CognitoUserPool({
                UserPoolId: factory_1.factory.getWebConfig().AWS.USER_POOL_ID,
                ClientId: factory_1.factory.getWebConfig().AWS.CLIENT_ID
            });
            var userData = {
                Username: params.email,
                Pool: userPool
            };
            var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
            cognitoUser.refreshSession(RefreshToken, function (err, session) {
                if (err) {
                    console.log(err);
                    return reject(err);
                }
                else {
                    var retObj = {
                        "access_token": session.accessToken.jwtToken,
                        "id_token": session.idToken.jwtToken,
                        "refresh_token": session.refreshToken.token,
                    };
                    console.log(retObj);
                    return resolve(retObj);
                }
            });
        });
    };
    /**
     *
     * @param params {username: email, oldPassword: old_password, newPassword: new_passsword}
     */
    AwsCognitoControllers.prototype.changePassword = function (params) {
        return new Promise(function (resolve, reject) {
            var authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails({
                Username: params.username,
                Password: params.oldPassword,
            });
            var userPool = new AmazonCognitoIdentity.CognitoUserPool({
                UserPoolId: factory_1.factory.getWebConfig().AWS.USER_POOL_ID,
                ClientId: factory_1.factory.getWebConfig().AWS.CLIENT_ID
            });
            var userData = {
                Username: params.username,
                Pool: userPool
            };
            var cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);
            cognitoUser.authenticateUser(authenticationDetails, {
                onSuccess: function (result) {
                    cognitoUser.changePassword(params.oldPassword, params.newPassword, function (err, result) {
                        if (err) {
                            console.log(err);
                            return reject(err);
                        }
                        else {
                            console.log("Successfully changed password of the user.");
                            console.log(result);
                            return resolve(result);
                        }
                    });
                },
                onFailure: function (err) {
                    console.log(err);
                    return reject(err);
                },
            });
        });
    };
    return AwsCognitoControllers;
}());
exports.AwsCognitoControllers = AwsCognitoControllers;
//# sourceMappingURL=controller.js.map