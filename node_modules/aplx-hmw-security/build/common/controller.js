"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../config/constants");
var jsonwebtoken_1 = require("jsonwebtoken");
var crypto_1 = __importDefault(require("crypto"));
var aplx_hmw_server_1 = require("aplx-hmw-server");
var CommonController = /** @class */ (function () {
    function CommonController() {
    }
    /**
 * verify custom jwt token.
 * This token is generated without aws
 * @param x-access-token JWt token
 */
    CommonController.prototype.validateJWTToken = function (token) {
        return new Promise(function (resolve, reject) {
            jsonwebtoken_1.verify(token, constants_1.SECRET_KEY, function (err, decoded) {
                if (err) {
                    return reject(err);
                }
                resolve(decoded);
            });
        });
    };
    /**
     * validate whether user have access
     * @param param {token: "jwt token", { email: "unique id, in our case, it is email"}
     * @returns boolean
     */
    CommonController.prototype.checkUserRoles = function (token, email) {
        // Check db, whether user have access to the url.
        return this.validateJWTToken(token).then(function (success) {
            return true;
        }, function (err) {
            return false;
        });
    };
    /**
     * Check user have authentication to the routes, which is accessed
     * get urls based on the Client
     */
    CommonController.prototype.getPrivilegeOfUserUsingToken = function (token) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.validateJWTToken(token).then(function (success) {
                var user = success["email"];
                var userModel;
                userModel.findOne({ loginName: user }, 'privileges', function (err, success) {
                    if (err) {
                        aplx_hmw_server_1.ApiServer.Logger.Error(err, __dirname, "getPrivilegeOfUserUsingToken()");
                        return reject(err);
                    }
                    success = JSON.parse(JSON.stringify(success));
                    success = success.privileges;
                    var result = {
                        wildCard: [],
                        individual: []
                    };
                    for (var _i = 0, success_1 = success; _i < success_1.length; _i++) {
                        var privilege = success_1[_i];
                        if (privilege.includes("*")) {
                            var split = privilege.split("/");
                            var url = split.slice(0, split.length - 1).join("/");
                            result.wildCard.push(url);
                        }
                        else {
                            result.individual.push(privilege);
                        }
                    }
                    return resolve(result);
                });
            }, function (err) {
                reject(err);
            });
        });
    };
    CommonController.prototype.createJWTToken = function (payload) {
        // const data = Buffer.from(payload).toString("base64")
        var token = jsonwebtoken_1.sign(payload, constants_1.SECRET_KEY, {
            expiresIn: constants_1.EXPIRE_TIME
        });
        return token;
    };
    CommonController.prototype.createHashPassword = function (data) {
        data += "#j77_6qg2ZKnw$6$w6YYm";
        for (var i = 0; i < 10; i++) {
            data = crypto_1.default.createHash('md5').update(data).digest('hex');
        }
        return data;
    };
    CommonController.prototype.comparePassword = function (rawPassword, encryptedPassword) {
        var tempPassword = this.createHashPassword(rawPassword);
        if (tempPassword === encryptedPassword) {
            return true;
        }
        return false;
    };
    return CommonController;
}());
exports.CommonController = CommonController;
//# sourceMappingURL=controller.js.map