import Axios, { AxiosError } from "axios";
import { Config } from "./interface";

/**
 * Holds axios framework based rest server functions to communicate with external servers
 * Headers are configured with user name and password and it will fetch ** CSRF TOKEN ** to communicate with SAP.
 * @class 
 */
export class DatawareServiceWithPasswordCSRFTokenAuth {

    private username: string = "";
    private password: string = "";

    private headers: any = {
        'Authorization': "Basic " + Buffer.from(this.username + ":" + this.password).toString("base64"),
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    }

    constructor(config: Config) {
        this.username = config.username;
        this.password = config.password;
    }

    private setHeaders(results?: Object): any {
        this.headers = {
            'Authorization': "Basic " + Buffer.from(this.username + ":" + this.password).toString("base64"),
            'Content-Type': 'application/json',
            'Accept': 'application/json',
        }
        if (results !== undefined) {
            // CSRF TOKEN VALIDATION. Set Cookie to header
            if (results["headers"]["set-cookie"]) {
                this.headers['Cookie'] = results["headers"]["set-cookie"];
            }
            if (results["headers"]['x-csrf-token']) {
                this.headers['x-csrf-token'] = results["headers"]["x-csrf-token"];
            } else {
                this.headers['x-csrf-token'] = "Fetch";
            }
        } else {
            this.headers['x-csrf-token'] = "Fetch";
        }
        Axios.defaults.headers.common = this.headers;
        Axios.defaults.responseType = 'json';

        return this.headers;
    }

    /**
     * Get web service will be called with the given url and if any headers added
     * By default it will add csrf token to the 
     * @param url ip/domain in which the web service needs to communicate
     * @param headers if any headers to be appended
     */
    get(url: string, headers?: any): Promise<any> {
        return new Promise((resolve, reject) => {
            if (headers) {
                Axios.defaults.headers.common = this.headers;
                Axios.defaults.responseType = 'json';
            } else {
                this.setHeaders();
            }
            try {
                return Axios.get(url)
                    .then((result) => {
                        return resolve(result.data);
                    }).catch((err) => {
                        return reject(err);
                    })
            } catch (error) {
                return reject(error);
            }
        });
    }

    /**
     * Function to call post web service with Axios Framework.
     * This is Promise based function call.
     * Uses CSRF validation for OData Calls
     * @param url -> string with filters applied
     * @returns Promise Object
     */
    post(url: string, data: any): Promise<any> {
        return new Promise((resolve, reject) => {
            this.getCSRFToken(url).then(results => {

                let headers: any = {
                    'Authorization': "Basic " + Buffer.from(this.username + ":" + this.password).toString("base64"),
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                };

                if (results["headers"]["set-cookie"]) {
                    headers['Cookie'] = results["headers"]["set-cookie"];
                }
                if (results["headers"]['x-csrf-token']) {
                    headers['x-csrf-token'] = results["headers"]["x-csrf-token"];
                }

                // setHeaders(results)

                Axios.post(url, data, { headers: headers }).then(response => {
                    return resolve(response);
                }).catch(err => {
                    return reject(err.response.data);
                })
            }).catch(err => {
                return reject(err);
            });
        });
    }

    put(url: string, data: any): Promise<any> {
        return new Promise((resolve, reject) => {
            this.getCSRFToken(url).then(results => {

                let headers: any = {
                    'Authorization': "Basic " + Buffer.from(this.username + ":" + this.password).toString("base64"),
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                };

                if (results["headers"]["set-cookie"]) {
                    headers['Cookie'] = results["headers"]["set-cookie"];
                }
                if (results["headers"]['x-csrf-token']) {
                    headers['x-csrf-token'] = results["headers"]["x-csrf-token"];
                }

                // this.setHeaders(results)

                Axios.put(url, data, { headers: headers }).then(response => {
                    return resolve(response);
                }).catch(err => {
                    let errResponse: any = {
                        status: err.response.status,
                        statusText: err.response.statusText,
                        url: err.response.config.url,
                        data: err.response.data
                    };
                    return reject(errResponse);
                })
            }).catch(err => {
                return reject(err);
            });
        });
    }

    private getCSRFToken(url: string): Promise<any> {
        return new Promise((resolve, reject) => {
            try {
                this.setHeaders();
                return Axios.get(url.substring(0, url.lastIndexOf("/")))
                    .then((result) => {
                        return resolve(result);
                    }).catch((err) => {
                        return reject(err);
                    });
            }
            catch (err) {
                console.log(err);
            }
        });
    }
}