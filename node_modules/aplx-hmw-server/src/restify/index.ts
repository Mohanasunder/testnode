import { RequestHandler, Server, Request, Response, Next, createServer, plugins } from "restify";
import corsMiddleware from "restify-cors-middleware";
import * as fs from "fs";
import * as path from "path";
import { HttpServer, ApplicationSource } from "./HttpServer";
import { Routes } from "../IRoutes";
// import { CommonController, AplxAuthRoute, factory as SecurityFactory } from "aplx-hmw-security";
import { factory as ServerFactory } from "../config";
import { DB } from "../db";
import { BunyanLogger } from "../logger";


// export let Logger: BunyanLogger; 

export class ApiServer implements HttpServer, Routes {
    public static Logger: BunyanLogger;

    initialize(httpServer: HttpServer): void {
        // Nothing to implement
        httpServer.get('/', this.heartBeatUrl.bind(this));
    }

    constructor() {

    }
    // Creates instance for restify server
    private restify: Server;

    private authorizationObject;
    private routesAdded = [];
    // Initialize all routes based on the methods
    get(url: string, requestHandler: RequestHandler): void {
        this.addRoute("get", url, requestHandler);
    }
    post(url: string, requestHandler: RequestHandler): void {
        this.addRoute("post", url, requestHandler);
    }
    put(url: string, requestHandler: RequestHandler): void {
        this.addRoute("put", url, requestHandler);
    }
    del(url: string, requestHandler: RequestHandler): void {
        this.addRoute("del", url, requestHandler);
    }

    /**
    * Will initalize all routes and pass the async handler
    * @param method defines whether the web service call should be get, post, put, del(delete)
    * @param url path which user will call to access
    * @param requestHandler restify request handler
    */
    private addRoute(method: "get" | "post" | "put" | "del", url: string, requestHandler: RequestHandler): void {
        this.restify[method](url, async (req, res, next) => {
            // Execute our middleware
            try {
                return await requestHandler(req, res, next);
            } catch (e) {
                // Store the logger somewhere
                console.log(e);
                ApiServer.Logger.Error(e);
                return res.send(500, e);
            }
        });
        this.routesAdded.push(`Added route ${method.toUpperCase()}: ${url}`)
        console.log(`Added route ${method.toUpperCase()}: ${url}`);
    }

    /**
   * Handles all unknown methods and response as success
   * @param req restify request object
   * @param res restify response object
   */
    private unknownMethodHandler(req: Request, res: Response) {
        if (req.method) {
            if (req.method.toLowerCase() === 'options') {
                var allowHeaders = ['Accept', 'Accept-Version', 'Content-Type', 'Api-Version', 'Origin', 'X-Requested-With', 'Authorization']; // added Origin & X-Requested-With & **Authorization**

                if (res["methods"].indexOf('OPTIONS') === -1) res["methods"].push('OPTIONS');

                res.header('Access-Control-Allow-Credentials', true);
                res.header('Access-Control-Allow-Headers', allowHeaders.join(', '));
                res.header('Access-Control-Allow-Methods', res["methods"].join(', '));
                res.header('Access-Control-Allow-Origin', req.headers.origin);

                return res.send(200);
            }
            // else
            //     return res.send(new this.restify.MethodNotAllowedError());
        }
    }

    /**
     * Create and start the server based on the port and with the routes initialized with the object
     * @param port mention any open port number in which the server needs to be operated
     * @param env mention the environment which the server is going to be operated
     * @param CONTROLLERS Pass the products as object
     * @param authorizationMethod pass whether authentication needs to be done
     * @param isSSL to set certificate for the server
     */
    start(port: number, env: string, CONTROLLERS: object[], authorizationMethod: Boolean, isSSL: Boolean = false): void {
        if(isNaN(port)) {
            port = 8000;
        } 
        if(env == undefined) {
            env = "development"
        }
        ApiServer.Logger = new BunyanLogger();
        this.oneTimeLogWrite();
        this.createServerBasedOnEnvironment(isSSL);
        this.restify.on('MethodNotAllowed', this.unknownMethodHandler);
        const webConfig = ServerFactory.getWebConfig();
        
        if (webConfig.applicationSource === ApplicationSource.APLX || webConfig.applicationSource === ApplicationSource.BOTH) {
            if (!webConfig.DB_URL) {
                console.log("aplx error: No Connection is created on DB");
                process.exit();
            }
            // SecurityFactory.setWebConfig({
            //     DB_URL: webConfig.DB_URL,
            //     applicationSource: webConfig.applicationSource
            // })
            // Added routes of login by default, if source is aplx
            // if (CONTROLLERS.indexOf(new AplxAuthRoute()) !== -1) {
            //     CONTROLLERS.push(new AplxAuthRoute());   
            // }

            // Setup postgres database pool
            DB.setup();
        }

        // Based on the configuration object from client project, we will use the security service
        if (authorizationMethod) {
            // if (!ServerFactory.getWebConfig().security) {
            //     console.log("Required factory settings for security");
            //     process.exit();
            // }
            // SecurityFactory.setWebConfig({
            //     applicationSource: ServerFactory.getWebConfig().applicationSource
            // })
            // this.authorizationObject = new CommonController();
        } else {
            this.authorizationObject = "skip";
        }

        // initalize the plugins
        this.restify.use(plugins.bodyParser({ mapParams: false, multiples: true, maxFileSize: 909090909 }));
        this.restify.use(plugins.queryParser());
        this.restify.use(plugins.requestLogger());
        this.restify.use(plugins.fullResponse());

        // Handle cors
        let cors = corsMiddleware({
            preflightMaxAge: 5, //Optional
            origins: ['*'],
            allowHeaders: ['API-Token'],
            exposeHeaders: ['API-Token-Expiry']
        });
        this.restify.pre(cors.preflight);
        this.restify.use(cors.actual);

        // Creates pre and after call request which can be used for log
        this.restify.pre(function (request, response, next) {
            ApiServer.Logger.info(request.method + " - " + request.url + " - " + new Date(request.time()));
            request.log.info({ req: request }, 'start')
            return next();
        });
        this.restify.on('after', function (req, res, route) {
            req.log.info({ res: res }, "finished");             // (3)
        });

        this.restify.pre((request: Request, response: Response, next: Next) => { 
            this.doValidation(request, response, next);
        });

        process.on('unhandledRejection', (reason, p) => {
            console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);
            // application specific logging, throwing an error, or other logic here
        });

        this.initControllers(CONTROLLERS);
        this.identifyLogs(this.routesAdded);
        this.restify.listen(port, () => console.log(`Server is up and running on port ${port}`))
    }

    private doValidation(request, response, next) {
        // By pass the unrestircted url 
        if (request.url.includes('authentication')) {
            return next();
        } else {
            if (this.authorizationObject === "skip") {
                return next();
            }
            this.authorizationObject.getPrivilegeOfUserUsingToken(request.headers['x-access-token']).then((success) => {
                const url = request.url;
                if (success.wildCard.indexOf(url) !== -1) {
                    return next();
                } else if (success.individual.indexOf(url) !== -1) {
                    return next();
                } else {
                    return response.send(500, "Don't have privileages to access the site");
                }
            }, (err) => {
                response.send(500, { msg: "Token validation failed", error: err })
            });
        }
        // return next();
    }
    /**
     * Will create server based on the environment, in which this server is going to  be operated
     * @param env mention whether the server is for development or production
     */
    private createServerBasedOnEnvironment(env: Boolean) {
        if (env === true) {
            this.restify = createServer({
                // log: Logger.logger,
                httpsServerOptions: {
                    key: fs.readFileSync(path.join(__dirname, '../../assets/key.pem')),
                    cert: fs.readFileSync(path.join(__dirname, '../../assets/server.crt')),
                    //requestCert: true,
                    rejectUnauthorized: false,
                    //ca: [fs.readFileSync(path.join(__dirname, 'server.crt'))]
                }
            });
        } else {
            this.restify = createServer({
                log: ApiServer.Logger.logger,
            });
        }
    }

    /**
     * 
     * @param CONTROLLERS  Pass the products as object
     */
    private initControllers(CONTROLLERS: any[]) {
        this.initialize(this);
        CONTROLLERS.forEach(controller => {
            // for (let i = 0; i < controller.length; i++) {
            controller.initialize(this);
            // }
        });
    }

    /**
     * 
     */
    private identifyLogs(data) {
        
        fs.appendFileSync(this.validateFilePath() + '/app-logs.log', data + '\n');
    }

    private oneTimeLogWrite(){
        /**
         * installation path (__dirname)
         * db url
         * server port
         */
        
        fs.writeFileSync(this.validateFilePath() + '/app-logs.log', "");
        const logs = `Installation Path: ${__dirname}
DB URL: ${ServerFactory.getWebConfig().DB_URL}
Server PORT: ${isNaN(+process.env.PORT) ? 8000 :process.env.PORT}
`
        this.identifyLogs(logs);
    }

    private validateFilePath(): string {
        let filePath = ServerFactory.getWebConfig().LOG_PATH;
        if (typeof(filePath) == "undefined") {
            filePath = ""+__dirname;
        }
        return filePath;
    }

    heartBeatUrl(req: Request, res: Response, next: Next) {
        res.send(200, ServerFactory.getWebConfig());
    }
}