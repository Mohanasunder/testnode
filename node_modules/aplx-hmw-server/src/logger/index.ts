import { createLogger, stdSerializers } from "bunyan";
import * as path from "path"
import { factory } from "../config";
import { existsSync, mkdirSync } from "fs";

export class BunyanLogger {

    logger;

    constructor() {
        var fileDate = new Date().toDateString();
        var filePath = factory.getWebConfig().LOG_PATH;
        if (typeof(filePath) != "undefined") {
            if (!existsSync(filePath)) {
                mkdirSync(filePath);
            }
        } else {
            filePath = __dirname;
        }

        this.logger = createLogger({
            name: 'HoodRiver Log',
            src: true,
            streams: [
                {
                    level: 'info',
                    path: path.join(filePath, 'info - ' + fileDate + '.log')            // log INFO and above to stdout
                },
                {
                    level: 'error',
                    path: path.join(filePath, 'error - ' + fileDate + '.log')   // log ERROR and above to a file
                }
            ],
            serializers: {
                req: stdSerializers.req,
                res: stdSerializers.res,
                err: stdSerializers.err
            }
        });
    }

    /**
    * Logs the data defined in to the console. 
    * To keep track of all requests, this logger can be used.
    * 
    * @param data text to register in log file
    */
    info(data: any) {
        this.logger.info(data);
    }

    /**
    * Logs errors to error.log file.
    * Maintains all tupe of records
    * @param data Error description.
    * @param fileName optional file name in which error occurs.
    * @param functionName optional function name in which function the issue is raised.
    * @param otherInfo optional additional information for the error log
    */
    Error(data: any, fileName?: String, functionName?: String, otherInfo?: String) {
        data = typeof (data) === "object" ? JSON.stringify(data) : data;
        this.logger.error(data + " " + fileName + " " + functionName + " " + otherInfo);
    }
}