import { Pool, Client } from "pg";
import { factory } from "../config";
import { ApiServer } from "../restify";


export class DB {
    
    private  static pool;

    // private client = new Client({
    //     connectionString: 'postgres://postgres:mymac@localhost:5432/simpleretail'
    // })

    static setup() {
        console.log(factory.getWebConfig().DB_URL);
        
        DB.pool = new Pool({
            connectionString: factory.getWebConfig().DB_URL
            // connectionString: 'postgres://postgres:mymac@localhost:5432/simpleretail'
        });
    }
    
    /**
     * Execute any query using DB.query() function
     * @param text query to be executed
     * @param params params needs to be mapped in query
     * DB.query('SELECT * FROM users WHERE id = $1', [id]')
     */
     static query(text: string, params: any[]): Promise<any> {
        return new Promise((resolve, reject) => {
            const start = Date.now();
            return DB.pool.query(text, params).then((success) => {
                const end = Date.now();
                const duration = end - start;
                   ApiServer.Logger.info('Postgres query -> ' + text + ' \n params -> ' + params + ' Start time '+ start + 'end time '+ end + 'duration ' + duration);
                // DB.pool.end();
                return resolve(success.rows);
            }).catch((error) => {
                const end = Date.now();
                const duration = end - start;
                   ApiServer.Logger.Error('Postgres query -> ' + text + ' \n params -> ' + params + ' Start time ' + start + 'end time ' + end + 'duration ' + duration);
                // DB.pool.end()
                return reject(error);
            })
        })
    }

    static DBJSONFunctions(method, json) {
        return new Promise((resolve, reject) => {
            const start = Date.now();
            return DB.pool.query(`select ${method} (${this.jsonFormatterForPost(json)})`, null).then((success) => {
                const end = Date.now();
                const duration = end - start;
                ApiServer.Logger.info('Postgres query -> ' + method + ' \n params -> ' + json + ' Start time ' + start + 'end time ' + end + 'duration ' + duration);
                // DB.pool.end();
                return resolve(success.rows);
            }).catch((error) => {
                const end = Date.now();
                const duration = end - start;
                ApiServer.Logger.Error('Postgres query -> ' + method + ' \n params -> ' + json + ' Start time ' + start + 'end time ' + end + 'duration ' + duration);
                // DB.pool.end()
                return reject(error);
            })
        })
    }
    static jsonFormatterForPost(jsn) {
        var myJSON = JSON.stringify(jsn);
        var text = myJSON.toString().replace(/"/g, '\\"');
        var final = "'" + text + "'";
        return final;
    }
}
