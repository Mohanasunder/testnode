"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = __importStar(require("path"));
var mv = require("mv");
var _ = __importStar(require("lodash"));
var FileUpload = /** @class */ (function () {
    function FileUpload() {
    }
    // implements Routes {
    // initialize(httpServer:HttpServer): void {
    //     httpServer.post('/upload', this.upload.bind(this))
    // }
    // upload(req: Request, res, next) {
    //     this.uploadFiles(req.files).then( (resp) => {
    //         res.send("success")
    //     });
    // }
    /**
     * Function to upload array of files
     * @param array of files
     */
    FileUpload.prototype.uploadFiles = function (files, destination, result, callback) {
        if (result == undefined) {
            result = {
                errors: [],
                success: []
            };
        }
        var self = this;
        try {
            // make array as flat json
            if (result.success.length === 0 && result.errors.length === 0) {
                files = this.flatJson(files);
            }
            // spilt each file from array
            var file = files[Object.keys(files)[0]];
            delete files[Object.keys(files)[0]];
            destination = destination ? destination : '../../../../uploads';
            var fileName_1 = file.name.replace(".", new Date() + ".").replace(/\s/g, '');
            var destinationPath = path.join(__dirname, destination, fileName_1);
            mv(file.path, destinationPath, { mkdirp: true }, function (err) {
                if (err) {
                    result.errors.push(err);
                }
                else {
                    result.success.push(fileName_1);
                }
                if (_.isEmpty(files)) {
                    return callback.onSuccess(result);
                }
                // unlinkSync(file.path);
                self.uploadFiles(files, destination, result, callback);
            });
        }
        catch (error) {
            return callback.onFailure(result);
        }
    };
    /**
     * Flat nested json
     */
    FileUpload.prototype.flatJson = function (files) {
        if (files[Object.keys(files)[0]].length > 0) {
            var file = files[Object.keys(files)[0]];
            delete files[Object.keys(files)[0]];
            var totalKey = Object.keys(files).length;
            for (var i = 0; i < file.length; i++) {
                totalKey = totalKey + 1;
                files[totalKey + 1] = file[i];
            }
            return files;
        }
        return files;
    };
    return FileUpload;
}());
exports.FileUpload = FileUpload;
//# sourceMappingURL=index.js.map