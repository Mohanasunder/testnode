"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var restify_1 = require("restify");
var restify_cors_middleware_1 = __importDefault(require("restify-cors-middleware"));
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var HttpServer_1 = require("./HttpServer");
// import { CommonController, AplxAuthRoute, factory as SecurityFactory } from "aplx-hmw-security";
var config_1 = require("../config");
var db_1 = require("../db");
var logger_1 = require("../logger");
// export let Logger: BunyanLogger; 
var ApiServer = /** @class */ (function () {
    function ApiServer() {
        this.routesAdded = [];
    }
    ApiServer.prototype.initialize = function (httpServer) {
        // Nothing to implement
        httpServer.get('/', this.heartBeatUrl.bind(this));
    };
    // Initialize all routes based on the methods
    ApiServer.prototype.get = function (url, requestHandler) {
        this.addRoute("get", url, requestHandler);
    };
    ApiServer.prototype.post = function (url, requestHandler) {
        this.addRoute("post", url, requestHandler);
    };
    ApiServer.prototype.put = function (url, requestHandler) {
        this.addRoute("put", url, requestHandler);
    };
    ApiServer.prototype.del = function (url, requestHandler) {
        this.addRoute("del", url, requestHandler);
    };
    /**
    * Will initalize all routes and pass the async handler
    * @param method defines whether the web service call should be get, post, put, del(delete)
    * @param url path which user will call to access
    * @param requestHandler restify request handler
    */
    ApiServer.prototype.addRoute = function (method, url, requestHandler) {
        var _this = this;
        this.restify[method](url, function (req, res, next) { return __awaiter(_this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, requestHandler(req, res, next)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        // Store the logger somewhere
                        console.log(e_1);
                        ApiServer.Logger.Error(e_1);
                        return [2 /*return*/, res.send(500, e_1)];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        this.routesAdded.push("Added route " + method.toUpperCase() + ": " + url);
        console.log("Added route " + method.toUpperCase() + ": " + url);
    };
    /**
   * Handles all unknown methods and response as success
   * @param req restify request object
   * @param res restify response object
   */
    ApiServer.prototype.unknownMethodHandler = function (req, res) {
        if (req.method) {
            if (req.method.toLowerCase() === 'options') {
                var allowHeaders = ['Accept', 'Accept-Version', 'Content-Type', 'Api-Version', 'Origin', 'X-Requested-With', 'Authorization']; // added Origin & X-Requested-With & **Authorization**
                if (res["methods"].indexOf('OPTIONS') === -1)
                    res["methods"].push('OPTIONS');
                res.header('Access-Control-Allow-Credentials', true);
                res.header('Access-Control-Allow-Headers', allowHeaders.join(', '));
                res.header('Access-Control-Allow-Methods', res["methods"].join(', '));
                res.header('Access-Control-Allow-Origin', req.headers.origin);
                return res.send(200);
            }
            // else
            //     return res.send(new this.restify.MethodNotAllowedError());
        }
    };
    /**
     * Create and start the server based on the port and with the routes initialized with the object
     * @param port mention any open port number in which the server needs to be operated
     * @param env mention the environment which the server is going to be operated
     * @param CONTROLLERS Pass the products as object
     * @param authorizationMethod pass whether authentication needs to be done
     * @param isSSL to set certificate for the server
     */
    ApiServer.prototype.start = function (port, env, CONTROLLERS, authorizationMethod, isSSL) {
        var _this = this;
        if (isSSL === void 0) { isSSL = false; }
        if (isNaN(port)) {
            port = 8000;
        }
        if (env == undefined) {
            env = "development";
        }
        ApiServer.Logger = new logger_1.BunyanLogger();
        this.oneTimeLogWrite();
        this.createServerBasedOnEnvironment(isSSL);
        this.restify.on('MethodNotAllowed', this.unknownMethodHandler);
        var webConfig = config_1.factory.getWebConfig();
        if (webConfig.applicationSource === HttpServer_1.ApplicationSource.APLX || webConfig.applicationSource === HttpServer_1.ApplicationSource.BOTH) {
            if (!webConfig.DB_URL) {
                console.log("aplx error: No Connection is created on DB");
                process.exit();
            }
            // SecurityFactory.setWebConfig({
            //     DB_URL: webConfig.DB_URL,
            //     applicationSource: webConfig.applicationSource
            // })
            // Added routes of login by default, if source is aplx
            // if (CONTROLLERS.indexOf(new AplxAuthRoute()) !== -1) {
            //     CONTROLLERS.push(new AplxAuthRoute());   
            // }
            // Setup postgres database pool
            db_1.DB.setup();
        }
        // Based on the configuration object from client project, we will use the security service
        if (authorizationMethod) {
            // if (!ServerFactory.getWebConfig().security) {
            //     console.log("Required factory settings for security");
            //     process.exit();
            // }
            // SecurityFactory.setWebConfig({
            //     applicationSource: ServerFactory.getWebConfig().applicationSource
            // })
            // this.authorizationObject = new CommonController();
        }
        else {
            this.authorizationObject = "skip";
        }
        // initalize the plugins
        this.restify.use(restify_1.plugins.bodyParser({ mapParams: false, multiples: true, maxFileSize: 909090909 }));
        this.restify.use(restify_1.plugins.queryParser());
        this.restify.use(restify_1.plugins.requestLogger());
        this.restify.use(restify_1.plugins.fullResponse());
        // Handle cors
        var cors = restify_cors_middleware_1.default({
            preflightMaxAge: 5,
            origins: ['*'],
            allowHeaders: ['API-Token'],
            exposeHeaders: ['API-Token-Expiry']
        });
        this.restify.pre(cors.preflight);
        this.restify.use(cors.actual);
        // Creates pre and after call request which can be used for log
        this.restify.pre(function (request, response, next) {
            ApiServer.Logger.info(request.method + " - " + request.url + " - " + new Date(request.time()));
            request.log.info({ req: request }, 'start');
            return next();
        });
        this.restify.on('after', function (req, res, route) {
            req.log.info({ res: res }, "finished"); // (3)
        });
        this.restify.pre(function (request, response, next) {
            _this.doValidation(request, response, next);
        });
        process.on('unhandledRejection', function (reason, p) {
            console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);
            // application specific logging, throwing an error, or other logic here
        });
        this.initControllers(CONTROLLERS);
        this.identifyLogs(this.routesAdded);
        this.restify.listen(port, function () { return console.log("Server is up and running on port " + port); });
    };
    ApiServer.prototype.doValidation = function (request, response, next) {
        // By pass the unrestircted url 
        if (request.url.includes('authentication')) {
            return next();
        }
        else {
            if (this.authorizationObject === "skip") {
                return next();
            }
            this.authorizationObject.getPrivilegeOfUserUsingToken(request.headers['x-access-token']).then(function (success) {
                var url = request.url;
                if (success.wildCard.indexOf(url) !== -1) {
                    return next();
                }
                else if (success.individual.indexOf(url) !== -1) {
                    return next();
                }
                else {
                    return response.send(500, "Don't have privileages to access the site");
                }
            }, function (err) {
                response.send(500, { msg: "Token validation failed", error: err });
            });
        }
        // return next();
    };
    /**
     * Will create server based on the environment, in which this server is going to  be operated
     * @param env mention whether the server is for development or production
     */
    ApiServer.prototype.createServerBasedOnEnvironment = function (env) {
        if (env === true) {
            this.restify = restify_1.createServer({
                // log: Logger.logger,
                httpsServerOptions: {
                    key: fs.readFileSync(path.join(__dirname, '../../assets/key.pem')),
                    cert: fs.readFileSync(path.join(__dirname, '../../assets/server.crt')),
                    //requestCert: true,
                    rejectUnauthorized: false,
                }
            });
        }
        else {
            this.restify = restify_1.createServer({
                log: ApiServer.Logger.logger,
            });
        }
    };
    /**
     *
     * @param CONTROLLERS  Pass the products as object
     */
    ApiServer.prototype.initControllers = function (CONTROLLERS) {
        var _this = this;
        this.initialize(this);
        CONTROLLERS.forEach(function (controller) {
            // for (let i = 0; i < controller.length; i++) {
            controller.initialize(_this);
            // }
        });
    };
    /**
     *
     */
    ApiServer.prototype.identifyLogs = function (data) {
        fs.appendFileSync(this.validateFilePath() + '/app-logs.log', data + '\n');
    };
    ApiServer.prototype.oneTimeLogWrite = function () {
        /**
         * installation path (__dirname)
         * db url
         * server port
         */
        fs.writeFileSync(this.validateFilePath() + '/app-logs.log', "");
        var logs = "Installation Path: " + __dirname + "\nDB URL: " + config_1.factory.getWebConfig().DB_URL + "\nServer PORT: " + (isNaN(+process.env.PORT) ? 8000 : process.env.PORT) + "\n";
        this.identifyLogs(logs);
    };
    ApiServer.prototype.validateFilePath = function () {
        var filePath = config_1.factory.getWebConfig().LOG_PATH;
        if (typeof (filePath) == "undefined") {
            filePath = "" + __dirname;
        }
        return filePath;
    };
    ApiServer.prototype.heartBeatUrl = function (req, res, next) {
        res.send(200, config_1.factory.getWebConfig());
    };
    return ApiServer;
}());
exports.ApiServer = ApiServer;
//# sourceMappingURL=index.js.map