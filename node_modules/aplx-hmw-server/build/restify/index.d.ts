import { RequestHandler, Request, Response, Next } from "restify";
import { HttpServer } from "./HttpServer";
import { Routes } from "../IRoutes";
import { BunyanLogger } from "../logger";
export declare class ApiServer implements HttpServer, Routes {
    static Logger: BunyanLogger;
    initialize(httpServer: HttpServer): void;
    constructor();
    private restify;
    private authorizationObject;
    private routesAdded;
    get(url: string, requestHandler: RequestHandler): void;
    post(url: string, requestHandler: RequestHandler): void;
    put(url: string, requestHandler: RequestHandler): void;
    del(url: string, requestHandler: RequestHandler): void;
    /**
    * Will initalize all routes and pass the async handler
    * @param method defines whether the web service call should be get, post, put, del(delete)
    * @param url path which user will call to access
    * @param requestHandler restify request handler
    */
    private addRoute;
    /**
   * Handles all unknown methods and response as success
   * @param req restify request object
   * @param res restify response object
   */
    private unknownMethodHandler;
    /**
     * Create and start the server based on the port and with the routes initialized with the object
     * @param port mention any open port number in which the server needs to be operated
     * @param env mention the environment which the server is going to be operated
     * @param CONTROLLERS Pass the products as object
     * @param authorizationMethod pass whether authentication needs to be done
     * @param isSSL to set certificate for the server
     */
    start(port: number, env: string, CONTROLLERS: object[], authorizationMethod: Boolean, isSSL?: Boolean): void;
    private doValidation;
    /**
     * Will create server based on the environment, in which this server is going to  be operated
     * @param env mention whether the server is for development or production
     */
    private createServerBasedOnEnvironment;
    /**
     *
     * @param CONTROLLERS  Pass the products as object
     */
    private initControllers;
    /**
     *
     */
    private identifyLogs;
    private oneTimeLogWrite;
    private validateFilePath;
    heartBeatUrl(req: Request, res: Response, next: Next): void;
}
