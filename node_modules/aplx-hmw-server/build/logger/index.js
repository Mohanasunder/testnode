"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var bunyan_1 = require("bunyan");
var path = __importStar(require("path"));
var config_1 = require("../config");
var fs_1 = require("fs");
var BunyanLogger = /** @class */ (function () {
    function BunyanLogger() {
        var fileDate = new Date().toDateString();
        var filePath = config_1.factory.getWebConfig().LOG_PATH;
        if (typeof (filePath) != "undefined") {
            if (!fs_1.existsSync(filePath)) {
                fs_1.mkdirSync(filePath);
            }
        }
        else {
            filePath = __dirname;
        }
        this.logger = bunyan_1.createLogger({
            name: 'HoodRiver Log',
            src: true,
            streams: [
                {
                    level: 'info',
                    path: path.join(filePath, 'info - ' + fileDate + '.log') // log INFO and above to stdout
                },
                {
                    level: 'error',
                    path: path.join(filePath, 'error - ' + fileDate + '.log') // log ERROR and above to a file
                }
            ],
            serializers: {
                req: bunyan_1.stdSerializers.req,
                res: bunyan_1.stdSerializers.res,
                err: bunyan_1.stdSerializers.err
            }
        });
    }
    /**
    * Logs the data defined in to the console.
    * To keep track of all requests, this logger can be used.
    *
    * @param data text to register in log file
    */
    BunyanLogger.prototype.info = function (data) {
        this.logger.info(data);
    };
    /**
    * Logs errors to error.log file.
    * Maintains all tupe of records
    * @param data Error description.
    * @param fileName optional file name in which error occurs.
    * @param functionName optional function name in which function the issue is raised.
    * @param otherInfo optional additional information for the error log
    */
    BunyanLogger.prototype.Error = function (data, fileName, functionName, otherInfo) {
        data = typeof (data) === "object" ? JSON.stringify(data) : data;
        this.logger.error(data + " " + fileName + " " + functionName + " " + otherInfo);
    };
    return BunyanLogger;
}());
exports.BunyanLogger = BunyanLogger;
//# sourceMappingURL=index.js.map